package main

import (
	"fmt"
	"strconv"
	"strings"
	"time"

	"github.com/blang/mpv"
	"github.com/hypebeast/go-osc/osc"
)

var duration float64
var mpvc *mpv.Client
var secondsNoSignal int
var paused bool

func mpvrun() (err error) {
	ipcc := mpv.NewIPCClient("/tmp/mpvsocket") // Lowlevel client
	mpvc = mpv.NewClient(ipcc)                 // Highlevel client, can also use RPCClient
	mpvc.Loadfile("everything.mp4", mpv.LoadFileModeReplace)
	time.Sleep(1 * time.Second)
	mpvc.SetPause(true)
	paused = true
	duration, err = mpvc.Duration()
	if err != nil {
		panic(err)
	}
	fmt.Println(duration)
	go func() {
		for {
			time.Sleep(1 * time.Second)
			secondsNoSignal++
			if secondsNoSignal == 3 {
				mpvc.SetPause(true)
				paused = true
			}
		}
	}()
	return
}

func main() {
	mpvrun()
	addr := "127.0.0.1:12345"
	d := osc.NewStandardDispatcher()
	d.AddMsgHandler("/pos", func(msg *osc.Message) {
		secondsNoSignal = 0
		foo := strings.Fields(msg.String())
		fmt.Println(foo)
		if len(foo) == 3 {
			pos, err := strconv.ParseFloat(foo[2], 64)
			if err == nil {
				seek(pos)
			}
		}
	})

	server := &osc.Server{
		Addr:       addr,
		Dispatcher: d,
	}
	server.ListenAndServe()
}

func seek(pos float64) (err error) {
	if paused {
		mpvc.SetPause(false)
	}
	fmt.Println("seeking", fmt.Sprintf("%2.4f", pos*duration))
	mpvc.Exec("seek", fmt.Sprintf("%2.4f", pos*duration), mpv.SeekModeAbsolute)

	// // Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// // curl 'http://127.0.0.1:8080/requests/status.xml?command=seek&val=21%25' -H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:90.0) Gecko/20100101 Firefox/90.0' -H 'Accept: */*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'X-Requested-With: XMLHttpRequest' -H 'Authorization: Basic OjEyMw==' -H 'Connection: keep-alive' -H 'Referer: http://127.0.0.1:8080/' -H 'Sec-Fetch-Dest: empty' -H 'Sec-Fetch-Mode: cors' -H 'Sec-Fetch-Site: same-origin' -H 'Pragma: no-cache' -H 'Cache-Control: no-cache'
	// cmd := fmt.Sprintf("http://127.0.0.1:8080/requests/status.xml?command=seek&val=%2.2f%%25", pos*100)
	// fmt.Println(cmd)
	// req, err := http.NewRequest("GET", cmd, nil)
	// if err != nil {
	// 	return
	// }
	// req.Header.Set("User-Agent", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:90.0) Gecko/20100101 Firefox/90.0")
	// req.Header.Set("Accept", "*/*")
	// req.Header.Set("Accept-Language", "en-US,en;q=0.5")
	// req.Header.Set("X-Requested-With", "XMLHttpRequest")
	// req.Header.Set("Authorization", "Basic OjEyMw==")
	// req.Header.Set("Connection", "keep-alive")
	// req.Header.Set("Referer", "http://127.0.0.1:8080/")
	// req.Header.Set("Sec-Fetch-Dest", "empty")
	// req.Header.Set("Sec-Fetch-Mode", "cors")
	// req.Header.Set("Sec-Fetch-Site", "same-origin")
	// req.Header.Set("Pragma", "no-cache")
	// req.Header.Set("Cache-Control", "no-cache")

	// resp, err := http.DefaultClient.Do(req)
	// if err != nil {
	// 	return
	// }
	// defer resp.Body.Close()

	return
}
